@page "/post/{day:int}"
@using Markdig
@inject IJSRuntime JS

<SectionContent SectionName="AppBar">
    <div class="quick-nav-link">
        <a href="@prevPostUrl">前の記事</a>
        <span>|</span>
        <a href="@nextPostUrl">次の記事</a>
    </div>
</SectionContent>

<div class="post-container">
    @((MarkupString)content)
</div>

@code {

    [Inject]
    private HttpClient Http { get; set; } = default!;

    [Parameter]
    public int Day { get; set; }

    private string content = string.Empty;

    private string? prevPostUrl;
    
    private string? nextPostUrl;

    private enum InitializingState
    {
        Loading,
        BuiltContent,
        SyntaxHighlighted
    }

    private InitializingState initializingState = InitializingState.Loading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (initializingState == InitializingState.BuiltContent)
        {
            initializingState = InitializingState.SyntaxHighlighted;
            await JS.InvokeVoidAsync("Prism.highlightAll");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // 前後の記事へのリンクを生成
        prevPostUrl = Day > 1 ? $"/post/{Day - 1}" : null;
        nextPostUrl = Day < 25 ? $"/post/{Day + 1}" : null;

        try
        {
            // GitHub raw リンクの組み立て
            var url = $"https://raw.githubusercontent.com/igjp-sample/AdventCalendar/main/content/{Day}.md";

            // Markdown ファイルを取得
            var markdown = await Http.GetStringAsync(url);

            // Markdig を使って HTML に変換
            var pipeline = new Markdig.MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
            var document = Markdown.Parse(markdown, pipeline);

            // カスタムパーサーを使って画像パスを書き換える
            ImagePathRewriterExtension.RewriteImagePaths(document);

            content = Markdig.Markdown.ToHtml(document, pipeline);
            initializingState = InitializingState.BuiltContent;
        }
        catch (Exception ex)
        {
            content = $"エラーが発生しました: {ex.Message}";
        }
    }

}
